There will be three main tests consisting of multiple subtests. There will be a test for a single user, for multiple users, and tests
to demonstrate the patches to flaws in the protocol that were discovered.Test 1 will focus on the implementation of the message box and 
if it correctly handles storage as well as dealing with errors according to the protocol. Test 2 will have similar tests but also an 
emphasis on the shared data. Test 3 will be for patched protocol flaws. The test plans are listed as the command the user inputs. Most 
commands will have two requests for user input (create\n name\n). This will be represented as (create -> name). 

Test 1: single user
	The goal of this test is to make sure that all the commands operate as 
	expected with only one user.

	1. Correct commands
		In this scenario these commands should all be successful. Client will
		receive and output the given message. This is the control test to
		ensure that under simple conditions the message system functions as 
		intended.

		- help (outputs all available commands)
		- create -> mybox (mybox is created)
		- open -> mybox
		- put -> MESSAGE
		- next (MESSAGE should be received and correctly output)
		- close -> mybox
		- delete -> mybox
		- quit

	2. Errors 
		The next test is of the various errors that can occur from the client 
		sending commands that the server cannot implement based on the protocol 
		(example: next when you do not have a box open). 
	
		Create errors
		- create -> box (incorrect format)
		- create -> boxnameiswaytoolongforDUMBserver (incorrect format)
		- create -> mybox -> create -> mybox (box already exists)

		Open errors
		- open -> box (incorrect format)
		- open -> newbox (does not exist)

		Next errors
		- next (no open box)
		- create -> mybox-> open -> mybox -> next (no messages in box)

		Put errors
		- put -> MESSAGE (no box open)

		Delete errors
		- delete -> box (incorrect format)
		- delete -> mybox (box does not exist)
		- create -> mybox -> open -> mybox -> delete -> mybox (box is open)
		- â€¦ put -> MESSAGE -> delete -> mybox (box still contains messages)

		Close errors
		- close -> box (incorrect format)
		- close -> mybox (box is not open)

		4. Other IP address
		Run DUMBclient as ./DUMBclient www.whitehouse.gov 5000

Test 2:  multiple users
	The goal here is to ensure that across multiple users there is correct handling of data. Mutexes prevent a user from interacting
	with a box that another user has opened, two creates or deletes happening simultaneously, etc.

	1. Test of a a user connecting and performing Test 1.1 followed by another user doing the same.
		User 1:
		- create -> mybox (mybox is created)
		- open -> mybox
		- put -> MESSAGE
		- next (MESSAGE should be received and correctly output)
		- close -> mybox
		- delete -> mybox
		- quit
		
		User 2:
		- create -> mybox (mybox is created)
		- open -> mybox
		- put -> MESSAGE
		- next (MESSAGE should be received and correctly output)
		- close -> mybox
		- delete -> mybox
		- quit

	2. Same as Test 2.1, but simulataneous rather than consecutive 
		User 1:								User 2:
		- create -> mybox (mybox is created)				- create -> newbox (mybox is created)
		- open -> mybox							- open -> newbox
		- put -> MESSAGE						- put -> MESSAGE
		- next (MESSAGE should be received and correctly output)	- next (MESSAGE should be received and correctly output)
		- close -> mybox						- close -> newbox
		- delete -> mybox						- delete -> newbox
		- quit								- quit


	3. User 1 has box "mybox" open. User 2 should not be able to access it.
		User 2:
		- open -> mybox (box is already open)
		- close -> mybox (box is already open)
		- delete -> mybox (box is already open)
	
	4. User 1 and 2 try to create and delete boxes simultaneously
		User 1:								User 2:
		- create -> mybox						- create -> mybox
		- delete -> mybox						- delete -> mybox
	
		create will have a box already exists error for one user, but be successful for the other.
		delete will have a box does not exist error for one user, but be successful for the other.


Test 3: patched flaws

	1. Opening a new box with one currently open
		If a user attempts to open a new box with one already open, the open box is closed and the new one is opened.
		Also applies if the user tries to open a box they already have open.
		
		- create -> mybox
		- create -> otherbox
		- open -> mybox
		- open -> otherbox
		- close -> otherbox (should succeed since this is now the open box)

			-or-

		- create -> mybox
		- open -> mybox
		- open -> mybox (mybox is closed and reopened)

	2. Opening the currently open box
		- create -> mybox -> open -> mybox -> open -> mybox (double open, box is open error) 
		- open -> mybox
		- open -> mybox (box is open error)

	3. User disconnecting with an open box
		The open box is closed upon a disconnect.
		Ex:	
		User 1:
		- create -> mybox
		- open -> mybox
		- quit

		User 2:
		- open -> mybox (mybox should be closed upon User 1's disconnect, User 2 should successfully open it)

	4. Client disconnects with control c rather than using the quit command
		User 1:
		- create -> mybox
		- open -> mybox
		- - ^c (server should detect the disconnect and close any open boxes)

		User 2:
		- open -> mybox (mybox should be closed upon User 1's disconnect, User 2 should successfully open it)




